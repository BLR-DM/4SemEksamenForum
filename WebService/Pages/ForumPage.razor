@page "/forum/{ForumName}"
@using WebService.Dtos.CommandDtos
@inject IForumService ForumService;
@inject NavigationManager Navigation
@inject UserSessionService Session
@inject ISubscriptionService SubscriptionService

<div class="content-wrapper">
    @if (Forum is not null)
    {
        <div class="custom-button">
            <button type="createpost" @onclick="NavigateToCreatePost" class="btn btn-primary">Create a post</button>
            @if (Session.SubscribedForumIds.Any(sfid => sfid == Forum?.Id))
            {
                <button @onclick="UnSubscribeFromForum" class="btn btn-secondary">Unsubscribe</button>

            }
            else
            {
                <button @onclick="SubscribeToForum" class="btn btn-primary">Subscribe</button>
            }
        </div>
        @if (Forum?.Posts is not null && Forum.Posts.Count != 0)
        {
            foreach (var post in Forum.Posts)
            {
                <div class="post-wrapper">
                    <ShortPostComponent Post="post" ForumName="@Forum.ForumName" ForumId="@Forum.Id"/>
                </div>
            }
        }
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-info">@ErrorMessage</div>
    }
</div>

@code {
    [Parameter] 
    public string ForumName { get; set; } = string.Empty;

    public string ErrorMessage { get; set; } = string.Empty;

    public ForumView? Forum { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        ErrorMessage = string.Empty;

        await Session.WaitUntilReadyAsync();

        Forum = await ForumService.GetForumWithPostsShort(ForumName);
        if (Forum == null)
        {
            ErrorMessage = "Forum not found";
        }
        else if (Forum.Posts.Count == 0)
        {
            ErrorMessage = "Forum doesn't have any posts";
        }
    }

    private async void NavigateToCreatePost()
    {
        Navigation.NavigateTo($"/forum/{ForumName}/{Forum.Id}/post/create");
    }

    private async Task SubscribeToForum()
    {
        Session.AddForumSubscription(Forum.Id);
        var createSubDto = new CreateSubDto(Forum.Id);
        await SubscriptionService.CreateSubscription(createSubDto);
    }

    private async Task UnSubscribeFromForum()
    {
        Session.RemoveForumSubscription(Forum.Id);
        await SubscriptionService.DeleteSubscription(Forum.Id);
    }


}

<style>
.post-wrapper{
    box-shadow: 3px 3px 10px 0px rgba(150, 150, 150, 0.5);
    margin-bottom: 10px;
}
.content-wrapper{
    max-width: 900px;
    position: relative;
    margin: 0 auto;
    padding: 1rem;
    box-shadow: 3px 3px 10px 0px rgba(150, 150, 150, 0.5);
    background-color: white;
}

.custom-button{
    display: flex;
    margin-bottom: 12px;
    justify-content: space-between;
}

</style>

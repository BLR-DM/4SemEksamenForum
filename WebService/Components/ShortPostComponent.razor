@using WebService.Dtos.CommandDtos
@inject NavigationManager Navigation
@inject IVoteService VoteService
@inject UserSessionService Session
@inject IPostService PostService

<div class="short-post">
    <div class="header">
        <span class="header-left">@Post.Username</span>
        <span class="header-right">@Post.CreatedDate</span>
    </div>

    <div class="title">
        @Post.Title
    </div>

    <div class="post-content">
        @Post.Content
    </div>

    <div class="interactions">
        <div class="vote">
            <i class="@GetUpvoteIcon()" @onclick="() => HandleVote(true)" style="cursor: pointer;"></i>
            <span>@Post.UpVotesCount</span>
            <i class="@GetDownvoteIcon()" @onclick="() => HandleVote(false)" style="cursor: pointer;"></i>
            <span>@Post.DownVotesCount</span>
        </div>
        <div class="comments">
            <i class="bi bi-chat-left-text" @onclick="NavigateToPost"></i>
            <span>@Post.CommentsCount</span>
        </div>
        @if (Post.UserId == Session.UserId || Session.HasRole("moderator"))
        {
            <div class="right">
                <i class="bi bi-trash3 delete-button" @onclick="() => DeletePost(ForumId, Post.Id)"></i>
            </div>
        }
    </div>
</div>
<h4>@ErrorMessage</h4>


@code {
    [Parameter]
    public PostView? Post { get; set; }
    [Parameter]
    public string? ForumName { get; set; }
    [Parameter]
    public int ForumId { get; set; }

    public string ErrorMessage { get; set; } = string.Empty;
    [Parameter] public EventCallback<int> OnDeleted { get; set; }


    private void NavigateToPost()
    {
        Navigation.NavigateTo($"/forum/{ForumName}/post/{Post.Id}/comments");
    }

    private async Task HandleVote(bool voteType)
    {
        if (string.IsNullOrEmpty(Session.UserId))
        {
            ErrorMessage = "UserId is NULL";
            return;
        }
        var handlePostVoteDto = new HandleVoteDto(voteType);

        // Håndter stemme i VoteService
        if (Post == null)
        {
            ErrorMessage = "UserId is NULL";
            return;
        }

        await VoteService.HandlePostVote(handlePostVoteDto, Post.Id);

        // Opdater stemmetællere og stemmer
        var existingVote = Post.Votes?.FirstOrDefault(v => v.UserId == Session.UserId);

        if (existingVote != null && Post.Votes != null)
        {
            if (existingVote.VoteType == voteType)
            {
                Post.Votes.Remove(existingVote);
                if (voteType)
                    Post.UpVotesCount--;
                else
                    Post.DownVotesCount--;
            }
            else
            {
                existingVote.VoteType = voteType;
                if (voteType)
                {
                    Post.UpVotesCount++;
                    Post.DownVotesCount--;
                }
                else
                {
                    Post.DownVotesCount++;
                    Post.UpVotesCount--;
                }
            }
        }
        else
        {
            Post.Votes ??= new List<VoteView>();
            Post.Votes.Add(new VoteView { UserId = Session.UserId, VoteType = voteType });
            if (voteType) Post.UpVotesCount++;
            else Post.DownVotesCount++;
        }

        // Tving komponenten til at re-rendre
        StateHasChanged();
    }


    private string GetUpvoteIcon()
    {
        if (Post.Votes is null || Post.Votes.Count == 0)
        {
            return "bi bi-hand-thumbs-up";
        }
        else if (Post.Votes.Where(pv => pv.VoteType == true).Any(pv => pv.UserId == Session.UserId))
        {
            return "bi bi-hand-thumbs-up-fill";
        }
        else
        {
            return "bi bi-hand-thumbs-up";
        }
    }

    private string GetDownvoteIcon()
    {
        if (Post.Votes is null || Post.Votes.Count == 0)
        {
            return "bi bi-hand-thumbs-down";
        }
        else if (Post.Votes.Where(pv => pv.VoteType == false).Any(pv => pv.UserId == Session.UserId))
        {
            return "bi bi-hand-thumbs-down-fill";
        }
        else
        {
            return "bi bi-hand-thumbs-down";
        }
    }

    private async Task DeletePost(int forumId, int postId)
    {
        try
        {
            await PostService.DeletePost(forumId, postId);

            await OnDeleted.InvokeAsync(postId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

}

<style>
    .short-post{
        padding: 10px;
    }

    .short-post h4 {
        margin: 0;
        font-size: 1.2rem;
    }
    
    .header{
        display: flex;
        justify-content: space-between;
    }

    .header-left{
        font-size: 10px;
    }

    .post-content{

    }

    .header-right{
        font-size: 12px;   
    }

    .title{
        font-weight: bold;
    }
    .interactions{
        display: flex;
        align-items: center;
        gap: 20px;
        font-size: 0.9rem;
        color: #555;
    }

    .right{
        margin-left: auto;
    }

    .vote, .comments {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .bi {
        font-size: 1.2rem;
    }

    .bi:hover {
        color: #0d6efd;
    }

    .delete-button{
        cursor: pointer;
        color: red;
    }

</style>
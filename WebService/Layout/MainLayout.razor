@using Microsoft.Extensions.FileSystemGlobbing.Internal
@using WebService.Components
@inject NavigationManager Navigation
@inject IForumService ForumService
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthProvider
@inject UserSessionService Session


<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation="1" Style="background-color: grey;">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">BLR Forum</MudText>
        <MudSpacer />
        <MudAutocomplete T="string"
            Value="SearchText" 
            SearchFunc="SearchForums" 
            ToStringFunc="x => x"
            Placeholder="Search..." 
            Adornment="Adornment.Start" 
            AdornmentIcon="@Icons.Material.Filled.Search" 
            Clearable="true"
            ResetValueOnEmptyText="true"
            Style="width: 300px;"
            ValueChanged="OnForumSelected"/>
        <div class="notification-icon-wrapper" @onclick="NavigateToNotifications">
            <i class="bi bi-bell"></i>
            @if (Session.Notifications?.Any(n => !n.IsRead) == true)
            {
                <span class="notification-badge">@Session.Notifications?.Where(n => n.IsRead == false).Count()</span>
            }
        </div>

        <MudSpacer />
        <AuthenticationComponent />

        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu Forums="Forums"/>
    </MudDrawer>
    <MudMainContent Style="background-color: #eeeeee;">
        @Body
    </MudMainContent>
</MudLayout>

<MudPopoverProvider />

@code {
    bool _drawerOpen = true;

    public string SearchText { get; set; } = string.Empty;

    public List<string> ForumNames { get; set; } = [];
    public List<ForumView> Forums { get; set; }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1500);
        await Session.InitializeAsync();

        if (Session.IsLoggedIn)
        {
            Forums = await ForumService.GetForums();
            ForumNames = Forums.Select(f => f.ForumName).ToList();
        }
    }


    private Task<IEnumerable<string>> SearchForums(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(Enumerable.Empty<string>());

        return Task.FromResult(ForumNames
            .Where(x => x.StartsWith(value, StringComparison.InvariantCultureIgnoreCase))
            .AsEnumerable());
    }

    private void OnForumSelected(string? selectedForumName)
    {
        if (string.IsNullOrWhiteSpace(selectedForumName))
            return;

        Navigation.NavigateTo($"/forum/{selectedForumName}");
    }

    private void NavigateToNotifications()
    {
        Navigation.NavigateTo("/notifications");
    }


}

<style>
    .notification-icon-wrapper {
        position: relative;
        display: inline-block;
        cursor: pointer;
        font-size: 1.5rem;
        color: white;
    }

    .notification-icon-wrapper .bi-bell {
        font-size: 1.5rem;
    }

    .notification-badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background-color: red;
        color: white;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 0.75rem;
        line-height: 1;
        min-width: 18px;
        text-align: center;
        font-weight: bold;
    }
</style>

